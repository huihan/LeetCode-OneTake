public class Solution {
    public int ladderLength(String start, String end, HashSet<String> dict) {
       Queue<Node> qe = new LinkedList<Node>();
       
       HashSet<String> unique = new HashSet<String>();
       qe.offer(new Node(start, null));
       while(!qe.isEmpty()){
          Node n = qe.poll();
          StringBuffer buf = new StringBuffer(n.s);
          for(int i = 0 ; i < n.s.length() ; i++){
            for(char c= 'a' ; c<= 'z' ;c++){
              if(c == n.s.charAt(i)) continue;
              buf.setCharAt(i , c);
              String tem = buf.toString();
              if(tem.equals(end)){
                int count =0;
                while(n!=null){
                  count++;
                  n = n.next;
                }
                return count+1;
              }
              else{
                if(!unique.contains(tem) && dict.contains(tem)){
                  qe.offer(new Node(tem , n));
                  unique.add(tem);
                }
              }
            }
            buf.setCharAt(i , n.s.charAt(i));
          }
       }
       return 0;
    }
}
class Node{
  String s;
  Node next;
  public Node(String str , Node node){
    this.s = str;
    this.next = node;
  }
}
